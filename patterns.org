#+TITLE: Clojure Patterns

* I have a sequential collection and...
** I want to check if an element is in it
#+begin_src clojure
  (some #{:x} [1 2 3 4]);; => nil

  (some #{:x} [1 2 3 4 :x])
  ;; => :x

  (some #{3} (vals {:a 1 :b 2 :c 3}))
  ;; => 3

  ;; less commonly

  ((into #{} [1 2 3 4 :x]) :x)
  ;; => :x
#+end_src

** I want to split it based on the value of each element
=split-with=, =partition-by= and =group-by= are all useful for this.

Each takes a predicate and uses it to split up a collection.

+ =split-with= just finds the first occurance of the predicate being true, and splits there
+ =partition-by= splits the collection into new sequences whenever the predicate starts or stops being true
+ =group-by= returns a map where the key is the return of the function and the vals are any values in the sequence that give that return.

#+begin_src clojure
  (split-with (partial >= 3) [1 2 3 4 5])
  ;; => [(1 2 3) (4 5)]
  (partition-by (partial >= 3) [1 2 3 4 5])
  ;; => ((1 2 3) (4 5))
  (vals (group-by (partial >= 3) [1 2 3 4 5]))
  ;; => ([1 2 3] [4 5])

  (split-with (partial >= 3) [1 2 5 4 2])
  ;; => [(1 2) (5 4 2)]
  (partition-by (partial >= 3) [1 2 5 4 2])
  ;; => ((1 2) (5 4) (2))
  (vals (group-by (partial >= 3) [1 2 5 4 2]))
  ;; => ([1 2 2] [5 4])
#+end_src

** I want to check every element in the collection against a predicate
=every?= /element meets the condition/ (the and), =some= /element meets the condition/ (the or)

#+begin_src clojure
  (every? even? [2 4 6 8])
  ;; => true
  (every? even? [2 4 6 8 9])
  ;; => false

  (some odd? [2 4 6 8])
  ;; => nil
  (some odd? [2 4 6 8 9])
  ;; => true
#+end_src

** I want to remove duplicates from it
#+begin_src clojure
  (distinct [1 2 3 4 1 2 3 4])
  ;; => (1 2 3 4)

  "use dedupe for removing only consecutive dups"

  (dedupe [1 1 2 2 3 3 1 2 3])
  ;; => (1 2 3 1 2 3)
#+end_src

** I want to create a 'sliding window' on window on it, looking at a few elements at a time
You can do this with partition's higher arity uses
#+begin_src clojure
  (def xs (range 12))
  ;; will just partition
  (partition 3 xs)
  ;; => ((0 1 2) (3 4 5) (6 7 8) (9 10 11))

  ;; the 2nd 'step' argument will introduce the window, acting like a slide size
  (partition 3 1 xs);; => ((0 1 2) (1 2 3) (2 3 4) (3 4 5) (4 5 6) (5 6 7) (6 7 8) (7 8 9) (8 9 10) (9 10 11))
  (partition 3 2 xs)
  ;; => ((0 1 2) (2 3 4) (4 5 6) (6 7 8) (8 9 10))
#+end_src

* I have a sequence of maps (observations) and...
** I want to combine them into a single seq based on a matching key-value pair present in both
#+begin_src clojure
  (def x [{:key1 1 :key2 2} {:key1 4 :key2 5}])
  (def y [{:key1 1 :key3 3} {:key1 4 :key3 6}])


  (into [] (clojure.set/join x y))
  ;; => [{:key1 4, :key2 5, :key3 6} {:key1 1, :key2 2, :key3 3}]
#+end_src

** I want to group them into a single map with one of the values being the key and the value being a sequence of other kv pairs
#+begin_src clojure
  (defn conjv [a b]
    (if (nil? a) [b]
        (conj a b)))

  (def observations [{:name "fred" :food "burger"}
                     {:name "fred" :food "pizza"}
                     {:name "fred" :food "apple"}
                     {:name "jane" :food "kebab"}
                     {:name "jane" :food "sandwich"}])

  (reduce (fn [m {:keys [name food]}]
            (update m name conjv food))
          {}
          observations)
  ;; => {"fred" ["burger" "pizza" "apple"], "jane" ["kebab" "sandwich"]}
#+end_src

(Note, you might think group-by here will be helpful, but though it gets the keys right you end with values being observations, which you have to map over anyway.

* I have a map and...
** also some reference data (as a map), and I want to look up the reference data and apply it to the data
Use =merge-with=

*** I have a pizza recipe and a map of ingredient prices. I want to find the price of the pizza ingredients
#+begin_src clojure
  (def pizza {:ingredients {:tomato    4
                            :flour     2
                            :cheese    4
                            :pepperoni 3}})

  (def prices {:tomato    12
               :flour     42
               :cheese    44
               :pepperoni 43})

  (merge-with * (:ingredients pizza) prices)
  ;; => {:tomato 48, :flour 84, :cheese 176, :pepperoni 129}

  (reduce + (vals (merge-with * (:ingredients pizza) prices)))
  ;; => 437
#+end_src

** I want to update every value in it
#+begin_src clojure
  (def ingredients {:tomato    4
                    :flour     2
                    :cheese    4
                    :pepperoni 3})

  (reduce-kv (fn [A k v] (assoc A k (* 10 v))) {} ingredients)
  ;; => {:tomato 40, :flour 20, :cheese 40, :pepperoni 30}

  (into {} (map #(vector (% 0) (* (% 1) 10)) ingredients))
  ;; => {:tomato 40, :flour 20, :cheese 40, :pepperoni 30}
#+end_src

** I want to drop several kvs from it
#+begin_src clojure
  (apply dissoc {:a 1 :b 2 :c 3} [:b :c])
  ;; => {:a 1}
#+end_src

** I want to update a key's values in a map, but only if it exists
#+begin_src clojure
  (update {:a 1 :b 2} :c inc)
  ;; null pointer exception

  (require '[medley.core :refer [update-existing]])

  (update-existing {:a 1 :b 2} :c inc)
  ;; => {:a 1, :b 2}

  (update-existing {:a 1 :b 2 :c 3} :c inc)
  ;; => {:a 1, :b 2, :c 4}
#+end_src

* Working with nested associative data
** I have several map of maps with sparse top-level keys, and I want to merge the inner maps only if they exist in one or more of the maps
Use =cond->=

#+begin_src clojure
  (defn merge-periods
    [& periods]
    (let [measures (apply merge-with + (map :measures periods))
          accruals (apply merge-with + (map :accruals periods))]
      (cond-> {:date (:date (first periods))}
        measures (assoc :measures measures)
        accruals (assoc :accruals accruals))))
#+end_src

* Working with numbers
** I want to separate a number into a collection of its digits
#+begin_src clojure
  (map #(Character/digit % 10) (str 1234));; => (1 2 3 4)
#+end_src

* Working with dates
** I want to parse a date from a string
#+begin_src clojure
  (clojure.instant/read-instant-date "2020-01-01")
  ;; => #inst "2020-01-01T00:00:00.000-00:00"
#+end_src

* Conditionals
* Working with strings
** I have a string "aaabcdddefffff", and I want to split it into continuous groups
#+begin_src clojure
  (mapv clojure.string/join (partition-by identity "aaabcdddefffff"))
  ;; => ["aaa" "b" "c" "ddd" "e" "fffff"]
#+end_src

** Misc tips
*** You can use =clojure.string/join= instead of =apply str=
