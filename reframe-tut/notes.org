#+TITLE: Notes on reframe

* Video 04-app setup
** Cloned repo
** =npm install= to get deps
** =npm run dev= to start

** Runthrough of files 
*** index is basic html
**** note: script is different from reagent, don't need to call =onload=
**** This is because of different config in =shadow-cljs=
*** src
**** core
***** requires =reagent.core=
***** same =app= as reagent
***** =start= function has =^:dev/after-load= meta, which replaces the need to call that in =index.html=
***** =init= just calls start. export means the name won't be truncated
**** app.db - a big map. In prod this will be empty and you'll load state from remote API
**** helpers: just some time stuff
*** package.json
**** deps: smooth-ui, styled comps and icons.
**** dev-deps: react-flip-move and react-highlight-js are for the react panel
*** shadow-cljs
**** bidi is a router
**** kibu/pushy is a router helper
**** builds :app - note :modules with an :init-fn, will tell shadow to run init. This is why you don't need it in index
***** compiler options are for the reframe 10x panel
* Video 05-smooth-ui
** a style system based on react-components
*** we already did the installs
*** we'll have to to import Normalize, as a string import in core
*** note the =<>= syntax - this allows you to return 2 elements in one components
**** Normally you would do something like =[:div [:comp1] [:comp2]]= but this doesn't work with native react components like =Normalize=, so you have to wrap in =(r/adapt-react-class Normalize)=
**** But this leaves a redundant div, so instead of =:div=, wrap in =:<>=, which will get allow you to get rid of it
*** you can use =:>= as a shorthand for =(r/adapt-react-class)=
*** style smooth-ui components with ={:variants "info"}= etc.
** smooth-ui has its own build in theme, which you can overide
*** setup a new file /theme.cljs/, importing the smooth theme
*** do your overides, and use =merge=
*** bring that into core with =ThemeProvider= from smooth, and add the themeprovider component 
*** Note you have to nest components under the ThemeProvider if you want the changes to apply
* Video 06-initialize-db
** To bootstrap you need to register event handlers (later vid)
** Also need to load data and display it
*** You can see the results in the =app-db= tab of the react10 window (+ path inspector)
** Register an event handler in app.db
*** require =re-frame.core=
*** register event handler with =(rf/reg-event=db)=
**** This takes a unique identifier kw (e.g. =:initialize-db=) 
**** and a fn with 2 args (more on which later), but for now we jsut return the =initial-app-db=
**** then import to core rf and the =app.db= ns
**** in the =start= function, before render, add =(rf/dispatch identifier)=
*** Note your app-db window doesn't show it yet - it is there, but the panel is async, it doesn't wait for your app to do something.
** All event are async, so there can be a race condition. You can use =(rf/dispatch-sync)=. Use this for the initial load, but let everything else be async
* Video 07-nav
** Layout - in a reframe you would have namespaces 
*** events
*** views
*** subs
** since our project is bigger we will split more horizontally and have a /nav/ folder with each of these namespaces. We'll also split views into a folder.
** Set up nav view component with a check for user
** Set up nav authenticated with smooth-ui Boxes (divs with exposed css) as links
** refactor the authenticated component - note that =:>= doesn't work in the for
** refactor again for some reason, more files
