#+TITLE: Clojure Libraries

* deps.edn
#+begin_src clojure
  {:deps
   {com.rpl/specter {:mvn/version "1.1.3"}}
#+end_src

* Core
** Core async
*** import =[clojure.core.async :as a]=
*** leiningen =[org.clojure/core.async "1.0.567"]=
** Spec
*** import =[clojure.spec.alpha :as spec]=
*** gen sublib =[clojure.spec.gen.alpha :as gen]=
** Set
** Match

* Data manipulation and transformation
** Malli (using transforms, see Data Schema)
** Specter - lens library for searching and updating highly nested structures
** Meander - declarative data transformations using pattern matching
*** lein =[meander/epsilon "0.0.421"]=
*** import =[meander.epsilon :as m]=
* Data schema
** clojure.spec
** malli
** schema
* Serialization and IO
** JSON
*** Clojure JSON
**** lein =[org.clojure/data.json "1.0.0"]=
**** import =[org.clojure.json :as json]=
**** =json.write-str= and =json/read-str=
*** Cheshire
**** lein =[cheshire "5.10.0"]=
**** import =[cheshire.core :refer :all]=
** =clojure.edn=
*** builtin
*** =[clojure.edn :as edn]=
** Hiccup - represent HTML in clojure data structures
** =clojure.data.csv=
*** [org.clojure/data.csv "1.0.0"]
#+begin_src clojure
  (require '[clojure.data.csv :as csv]
           '[clojure.java.io :as io])

  (with-open [reader (io/reader "in-file.csv")]
    (doall (csv/read-csv reader)))
  ;; parses to a vector of strings

  (with-open [writer (io/writer "out-file.csv")]
    (csv/write-file writer
                    [["abc" "def"]
                     ["ghi" "jkl"]]))
#+end_src

* Math and math-like
** combinatorics
*** lein =[org.clojure/math.combinatorics "0.1.6"]=
*** import =[clojure.math.combinatorics :as c]=
** numeric tower - various common math utilities
*** lein =[org.clojure/math.numeric-tower "0.0.4"]=
*** import =[clojure.math.numeric-tower :as math]=
*** sqrt, expt, gcd, lcm, floor, ceil, round
* App design
** expound - humanize error messages
** component - framework for managing component lifecycles
*** lein =[com.stuartsierra/component ""]=
*** import =[com.stuartsierra.component :as component]=
** environ - light lib for managing environment settings
** immuconf - lib for managing config (slightly heavier than environ)
* Testing
* Database
** Crux
** next.jdbc
** datomic
** datascript (in-memory DB meant for the browser)
* HTTP
** clj-http
** http-kit
* Time
** Juxt Tick
*** ={tick {:mvn/version "0.4.24-alpha"}=
*** =(require '[tick.alpha.api :as t])=
